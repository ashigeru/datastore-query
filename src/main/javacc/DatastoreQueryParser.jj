/*
 * Copyright 2010 @ashigeru.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
options {
    STATIC = false;
    UNICODE_INPUT = true;
    LOOKAHEAD = 1;

    /* for debug only 
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = true;
    /* */
}

PARSER_BEGIN(DatastoreQueryParser0)
/*
 * Copyright 2010 @ashigeru.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.ashigeru.appengine.datastore.parser;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.ashigeru.appengine.datastore.common.*;

class DatastoreQueryParser0 {

    private static <T> List<T> newList() {
        return new ArrayList<T>();
    }

    private static <T> List<T> empty() {
        return Collections.emptyList();
    }
}
PARSER_END(DatastoreQueryParser0)

// ----------------- lexical part --------------------

/*
EndOfLineComment :
    -- CommentBodyPart*
CommentBodyPart :
    any character except LF CR
*/
SPECIAL_TOKEN : 
{   <LINE_COMMENT : "--" ( ~["\r", "\n"] )* >
}

/*
Whitespace : one of
    SP HT CR LF
*/
SPECIAL_TOKEN :
{   <SPACE : " " | "\t" | "\r" | "\n">
}

/*
Keyword : one of
     SELECT APPLY EVERY FROM WHERE EXISTS
     ORDER BY ASC DESC
*/
TOKEN [IGNORE_CASE] :
{   <SELECT : "select">
|   <APPLY : "apply">
|   <EVERY : "every">
|   <FROM : "from">
|   <WHERE : "where">
|   <EXISTS : "exists">
|   <ORDER : "order">
|   <BY : "by">
|   <ASC : "asc">
|   <DESC : "desc">
}

/*
Separator: one of
    ( ) { } [ ] , . ;
*/
TOKEN :
{   <OPEN_PAREN    : "(" >
|   <OPEN_BRACE    : "{" >
|   <OPEN_BRACKET  : "[" >
|   <CLOSE_PAREN   : ")" >
|   <CLOSE_BRACE   : "}" >
|   <CLOSE_BRACKET : "]" >
|   <COMMA : "," >
|   <DOT : "." >
|   <SEMICOLON : ";" >
}

/*
Operator: one of
    * / % + -
    ==  !=  <   >  <=  >=
    and not or
    like in
*/
TOKEN [IGNORE_CASE] :
{   <ADD : "+">
|   <SUBTRACT : "-">
|   <MULTIPLY : "*">
|   <DIVIDE : "/">
|   <REMAINDER : "%">
|   <DOUBLE_EQUAL : "==">
|   <NOT_EQUAL : "!=">
|   <LESS_THAN : "<">
|   <GREATER_THAN : ">">
|   <LESS_THAN_OR_EQUAL : "<=">
|   <GREATER_THAN_OR_EQUAL : ">=">
|   <AND : "and">
|   <OR : "or">
|   <NOT : "not">
|   <LIKE : "like">
|   <IN : "in">
}

/*
IntegerLiteral :
    DecimalIntegerLiteral
    HexIntegerLiteral
    OctalIntegerLiteral
DecimalIntegerLiteral :
    0
    NonZeroDigit Digit*
HexIntegerLiteral :
    0 x HexDigit+
    0 X HexDigit+
OctalIntegerLiteral :
    0 OctDigit+
NonZeroDigit : one of
    1 2 3 4 5 6 7 8 9
Digit : one of
    0 NonZeroDigit
HexDigit : one of
    Digit a b c d e f A B C D E F
OctDigit : one of
    0 1 2 3 4 5 6 7
*/
TOKEN :
{   <INTEGER
    : <DECIMAL_INTEGER>
    | <HEX_INTEGER>
    | <OCTAL_INTEGER>
    >
|   <#DECIMAL_INTEGER
    : "0"
    | <NON_ZERO_DIGIT> (<DIGIT>)*
    >
|   <#HEX_INTEGER
    : "0" ["x", "X"] (<HEX_DIGIT>)+
    >
|   <#OCTAL_INTEGER
    : "0" (<OCT_DIGIT>)+
    >
|   <#NON_ZERO_DIGIT : ["1"-"9"]>
|   <#HEX_DIGIT : ["0"-"9", "A"-"F", "a"-"f"]>
|   <#OCT_DIGIT : ["0"-"7"]>
}

/*
RealNumberLiteral :
    Digit+ . Digit* DecimalExpornentPart?
    . Digit+ DecimalExpornentPart?
DecimalExpornentPart :
    e SignedInteger
    E SignedInteger
SignedInteger :
    + Digit+
    - Digit+
*/
TOKEN :
{   <REAL_NUMBER
    : (<DIGIT>)+ "." (<DIGIT>)* (<DECIMAL_EXPONENT_PART>)?
    | "." (<DIGIT>)+ (<DECIMAL_EXPONENT_PART>)?
    >
|   <#DECIMAL_EXPONENT_PART : ["e", "E"] <SIGNED_INTEGER>>
|   <#SIGNED_INTEGER : ["+", "-"] (<DIGIT>)+>
}

/*
BooleanLiteral : one of
    true false
*/
TOKEN :
{   <TRUE : "true">
|   <FALSE : "false">
}

/*
NullLiteral :
    null
*/
TOKEN :
{   <NULL : "null">
}

/*
StringLiteral :
    ' SingleQuotedCharacter* '
    " DoubleQuotedCharacter* "
SingleQuotedCharacter :
    CharacterWithoutSingleQuote
    EscapeSequence
DoubleQuotedCharacter :
    CharacterWithoutDoubleQuote
    EscapeSequence
CharacterWithoutSingleQuote :
    any character except ' \
CharacterWithoutSingleQuote :
    any character except " \
EscapeSequence :
    \ SingleEscapeCharacter
    UnicodeEscapeCharacter
SingleEscapeCharacter : one of
    b t n f r " ' ( ) { } [ ] \
UnicodeEscapeCharacter:
    \ u HexDigit HexDigit HexDigit HexDigit
*/
TOKEN :
{   <STRING
    : "'" (<SINGLE_QUOTED_CHARACTER>)* "'"
    | "\"" (<DOUBLE_QUOTED_CHARACTER>)* "\""
    >
|   <#SINGLE_QUOTED_CHARACTER
    : <CHARACTER_WITHOUT_SINGLE_QUOTE>
    | <ESCAPE_SEQUENCE>
    >
|   <#DOUBLE_QUOTED_CHARACTER
    : <CHARACTER_WITHOUT_DOUBLE_QUOTE>
    | <ESCAPE_SEQUENCE>
    >
|   <#CHARACTER_WITHOUT_SINGLE_QUOTE : ~["'", "\\"]>
|   <#CHARACTER_WITHOUT_DOUBLE_QUOTE : ~["\"", "\\"]>
|   <#ESCAPE_SEQUENCE
    : "\\" <SINGLE_ESCAPE_CHARACTER>
    | <UNICODE_ESCAPE_CHARACTER>
    >
|   <#SINGLE_ESCAPE_CHARACTER
    : ["b", "t", "n", "f", "r"]
    | ["\"", "'"]
    | "#"
    | ["(", ")", "{", "}", "[", "]"]
    | "\\"
    >
|   <#UNICODE_ESCAPE_CHARACTER
    : "\\" "u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>
    >
}

/*
Identifier
*/
TOKEN :
{   <IDENTIFIER : <IDENTIFIER_START> (<IDENTIFIER_PART>)* >
|   <#IDENTIFIER_START : <JAVA_ID_LETTER> >
|   <#IDENTIFIER_PART : <JAVA_ID_LETTER> | <JAVA_ID_DIGIT> >
|   <#JAVA_ID_LETTER
    : "\u0024"
    | ["\u0041"-"\u005a"]
    | "\u005f"
    | ["\u0061"-"\u007a"]
    | ["\u00c0"-"\u00d6"]
    | ["\u00d8"-"\u00f6"]
    | ["\u00f8"-"\u00ff"]
    | ["\u0100"-"\u1fff"]
    | ["\u3040"-"\u318f"]
    | ["\u3300"-"\u337f"]
    | ["\u3400"-"\u3d2d"]
    | ["\u4e00"-"\u9fff"]
    | ["\uf900"-"\ufaff"]
    >
|   <#JAVA_ID_DIGIT
    : ["\u0030"-"\u0039"]
    | ["\u0660"-"\u0669"]
    | ["\u06f0"-"\u06f9"]
    | ["\u0966"-"\u096f"]
    | ["\u09e6"-"\u09ef"]
    | ["\u0a66"-"\u0a6f"]
    | ["\u0ae6"-"\u0aef"]
    | ["\u0b66"-"\u0b6f"]
    | ["\u0be7"-"\u0bef"]
    | ["\u0c66"-"\u0c6f"]
    | ["\u0ce6"-"\u0cef"]
    | ["\u0d66"-"\u0d6f"]
    | ["\u0e50"-"\u0e59"]
    | ["\u0ed0"-"\u0ed9"]
    | ["\u1040"-"\u1049"]
    >
}

// lexical macros
TOKEN :
{   <#DIGIT : ["0"-"9"]>
}

// errneous token
TOKEN :
{   <ERRONEOUS : ~[] >
}

// ----------------- accessors -----------------
Statement parse() :
{
    Statement s;
}
{
    s = Query()
    <EOF>
    { return s; }
}

// ----------------- syntax part --------------------
/*
Query:
    SelectStatement
    ApplyStatement
*/
private Statement Query() :
{
    Statement s;
}
{
    s = SelectStatement()
    { return s; }
|
    s = ApplyStatement()
    { return s; }
}

/*
SelectStatement:
    'SELECT' TermList Source Filter? Order?
*/
private SelectStatement SelectStatement() :
{
    List<Term> t;
    Source s;
    Filter f = null;
    Order o = null;
}
{
    <SELECT>
    t = TermList()
    s = Source()
    (
        f = Filter()
    |
        {}
    )
    (
        o = Order()
    |
        {}
    )
    { return new SelectStatement(t, s, f, o); }
}

/*
ApplyStatement:
    'APPLY' Procedure Source Filter? Order?
*/
private ApplyStatement ApplyStatement() :
{
    Procedure p;
    Source s;
    Filter f = null;
    Order o = null;
}
{
    <APPLY>
    p = Procedure()
    s = Source()
    (
        f = Filter()
    |
        {}
    )
    (
        o = Order()
    |
        {}
    )
    { return new ApplyStatement(p, s, f, o); }
}

/*
Procedure:
    Name '(' TermList? ')'
    Name '(' TermList ')' 'EVERY' IntegerLiteral
*/
private Procedure Procedure() :
{
    SimpleName n;
    List<Term> t = empty();
    Literal i = null;
}
{
    n = Name()
    "("
    (
        t = TermList()
        ")"
        (
            <EVERY>
            i = IntegerLiteral()
        |
            {}
        )
    |
        ")"
        {
        }
    )
    { return new Procedure(n, t, i); }
}

/*
Source:
    'FROM' Type Name
*/
private Source Source() :
{
    Type t;
    SimpleName n;
}
{
    <FROM>
    t = Type()
    n = Name()
    { return new Source(t, n); }
}

/*
Type:
    QualifiedName
*/
private Type Type() :
{
    Name n;
}
{
    n = QualifiedName()
    { return new Type(n); }
}

/*
QualifiedName:
    QualifiedName '.' Name
    Name
*/
private Name QualifiedName() :
{
    Name q;
    SimpleName s;
}
{
    q = Name()
    (
        "."
        s = Name()
        { q = new QualifiedName(q, s); }
    )*
    { return q; }
}

/*
Filter:
    'WHERE' Constraint
*/
private Filter Filter() :
{
    Constraint c;
}
{
    <WHERE>
    c = Constraint()
    { return new Filter(c); }
}

/*
Order:
    'ORDER' 'BY' OrderCriterionList
*/
private Order Order() :
{
    List<OrderCriterion> o;
}
{
    <ORDER>
    <BY>
    o = OrderCriterionList()
    { return new Order(o); }
}

/*
OrderCriterionList:
    OrderCriterionList ',' OrderCriterion
    OrderCriterion
*/
private List<OrderCriterion> OrderCriterionList() :
{
    OrderCriterion o;
    List<OrderCriterion> list = newList();
}
{
    o = OrderCriterion()
    { list.add(o); }
    (
        ","
        o = OrderCriterion()
        { list.add(o); }
    )*
    { return list; }
}

/*
OrderCriterion:
    Term 'ASC'
    Term 'DESC'
*/
private OrderCriterion OrderCriterion() :
{
    Term t;
}
{
    t = Term()
    (
        <ASC>
        { return new OrderCriterion(OrderDirection.ASC, t); }
    |
        <DESC>
        { return new OrderCriterion(OrderDirection.DESC, t); }
    )
}

/*
Constraint:
    Or
*/
private Constraint Constraint() :
{
    Constraint c;
}
{
    c = Or()
    { return c; }
}

/*
Or:
    Or 'OR' And
    And
*/
private Constraint Or() :
{
    Constraint c, r;
}
{
    c = And()
    (
        <OR>
        r = And()
        { c = new OrConstraint(c, r); }
    )*
    { return c; }
}

/*
And:
    And 'AND' Not
    Not
*/
private Constraint And() :
{
    Constraint c, r;
}
{
    c = Not()
    (
        <AND>
        r = Not()
        { c = new AndConstraint(c, r); }
    )*
    { return c; }
}

/*
Not:
    'NOT' Not
    Atom
*/
private Constraint Not() :
{
    Constraint c;
}
{
    <NOT>
    c = Not()
    { return new NotConstraint(c); }
|
	c = Atom()
	{ return c; }
}

/*
Atom:
	'(' Constraint ')'
    Relational
    Quantification
*/
private Constraint Atom() :
{
    Constraint c;
}
{
	LOOKAHEAD( Relational() )
    c = Relational()
    { return c; }
|
	"("
	c = Constraint()
	")"
	{ return new Block(c); }
|
    c = Quantification()
    { return c; }
}

/*
Relational:
    Term Operator Term
*/
private Relational Relational() :
{
    Term l, r;
    RelationalOperator o;
}
{
    l = Term()
    o = Operator()
    r = Term()
    { return new Relational(o, l, r); }
}

/*
Quantification:
    'EXISTS' Name 'IN' Primary ',' Atom
    'EXISTS' Name 'IN' Primary Atom
*/
private Quantification Quantification() :
{
    SimpleName s;
    Term t;
    Constraint c;
}
{
    <EXISTS>
    s = Name()
    <IN>
    t = Primary()
    ( "," )?
    c = Atom()
    { return new Quantification(s, t, c); }
    
}

/*
Term:
    Additive
*/
private Term Term() :
{
    Term t;
}
{
    t = Additive()
    { return t; }
}

/*
Additive:
    Additive '+' Multiplicative
    Additive '-' Multiplicative
    Multiplicative
*/
private Term Additive() :
{
    Term t, r;
}
{
    t = Multiplicative()
	(
	    <ADD>
	    r = Multiplicative()
        { t = new BinaryTerm(BinaryTermOperator.ADD, t, r); }
	|
	    <SUBTRACT>
	    r = Multiplicative()
        { t = new BinaryTerm(BinaryTermOperator.SUBTRACT, t, r); }
	)*
    { return t; }
}

/*
Multiplicative:
    Multiplicative '*' Unary
    Multiplicative '/' Unary
    Multiplicative '%' Unary
    Unary
*/
private Term Multiplicative() :
{
    Term t, r;
}
{
	t = Unary()
	(
	    <MULTIPLY>
	    r = Unary()
        { t = new BinaryTerm(BinaryTermOperator.MULTIPLY, t, r); }
	|
	    <DIVIDE>
	    r = Unary()
        { t = new BinaryTerm(BinaryTermOperator.DIVIDE, t, r); }
	|
	    <REMAINDER>
	    r = Unary()
        { t = new BinaryTerm(BinaryTermOperator.REMAINDER, t, r); }
	)*
    { return t; }
}

/*
Unary:
    '+' Unary
    '-' Unary
    Primary
*/
private Term Unary() :
{
    Term t;
}
{
	<ADD>
	t = Unary()
    { return new UnaryTerm(UnaryTermOperator.PLUS, t); }
|
	<SUBTRACT>
	t = Unary()
    { return new UnaryTerm(UnaryTermOperator.MINUS, t); }
|
    t = Primary()
    { return t; }
}

/*
Primary:
    '(' Term ')'
    Literal
    Property
    Construct
    List
    Name
*/
private Term Primary() :
{
    Term t;
}
{
	"("
	t = Term()
	")"
	{ return new ParenthesizedTerm(t); }
|
    t = Literal()
    { return t; }
|
	t = List()
    { return t; }
|
    LOOKAHEAD(2)
    t = Property()
    { return t; }
|
    LOOKAHEAD(2)
    t = Construct()
    { return t; }
|
    t = Name()
    { return t; }
}

/*
Operator:
    '=='
    '!='
    '<'
    '>'
    '<='
    '>='
    'LIKE'
    'IN'
*/
private RelationalOperator Operator() :
{
}
{
    <DOUBLE_EQUAL>
    { return RelationalOperator.EQUAL; }
|
    <NOT_EQUAL>
    { return RelationalOperator.NOT_EQUAL; }
|
    <LESS_THAN>
    { return RelationalOperator.LESS_THAN; }
|
    <GREATER_THAN>
    { return RelationalOperator.GREATER_THAN; }
|
    <LESS_THAN_OR_EQUAL>
    { return RelationalOperator.LESS_THAN_OR_EQUAL; }
|
    <GREATER_THAN_OR_EQUAL>
    { return RelationalOperator.GREATER_THAN_OR_EQUAL; }
|
    <LIKE>
    { return RelationalOperator.LIKE; }
|
 	<IN>
 	{ return RelationalOperator.IN; }
}

/*
List:
    '[' TermList? ']'
*/
private ListTerm List() :
{
    List<Term> t = empty();
}
{
    "["
    (
    	t = TermList()
    |
    	{}
    )
    "]"
    { return new ListTerm(t); }
}

/*
TermList:
    Term ',' TermList
    Term
*/
private List<Term> TermList() :
{
    Term t;
    List<Term> list = newList();
}
{
    t = Term()
    { list.add(t); }
    (
        ","
        t = Term()
        { list.add(t); }
    )*
    { return list; }
}

/*
Property:
    Name '.' Name
*/
private PropertyTerm Property() :
{
    SimpleName o;
    SimpleName p;
}
{
    o = Name()
    "."
    p = Name()
    { return new PropertyTerm(o, p); }
}

/*
Literal:
    IntegerLiteral
    RealNumberLiteral
    BooleanLiteral
    StringLiteral
    NullLiteral
*/
private Literal Literal() :
{
    Literal l;
}
{
    l = IntegerLiteral()
    { return l; }
|
    l = RealNumberLiteral()
    { return l; }
|
    l = BooleanLiteral()
    { return l; }
|
    l = StringLiteral()
    { return l; }
|
    l = NullLiteral()
    { return l; }
}

/*
IntegerLiteral:
    INTEGER
*/
private Literal IntegerLiteral() :
{
    Token t;
}
{
    t = <INTEGER>
    { return new Literal(LiteralKind.INTEGER, t.image); }
}

/*
RealNumberLiteral:
    REAL_NUMBER
*/
private Literal RealNumberLiteral() :
{
    Token t;
}
{
    t = <REAL_NUMBER>
    { return new Literal(LiteralKind.REAL_NUMBER, t.image); }
}

/*
BooleanLiteral: one of
    TRUE FALSE
*/
private Literal BooleanLiteral() :
{
    Token t;
}
{
    t = <TRUE>
    { return new Literal(LiteralKind.BOOLEAN, t.image); }
|
    t = <FALSE>
    { return new Literal(LiteralKind.BOOLEAN, t.image); }
}

/*
StringLiteral:
    STRING
*/
private Literal StringLiteral() :
{
    Token t;
}
{
    t = <STRING>
    { return new Literal(LiteralKind.STRING, t.image); }
}

/*
NullLiteral:
    NULL
*/
private Literal NullLiteral() :
{
    Token t;
}
{
    t = <NULL>
    { return new Literal(LiteralKind.NULL, t.image); }
}

/*
Construct:
    Name '(' TermList ')'
*/
private ConstructTerm Construct() :
{
    SimpleName s;
    List<Term> t;
}
{
    s = Name()
    "("
    t = TermList()
    ")"
    { return new ConstructTerm(s, t); }
}

/*
Name:
    IDENTIFIER
*/
private SimpleName Name() :
{
    Token t;
}
{
    t = <IDENTIFIER>
    { return new SimpleName(t.image); }
}
